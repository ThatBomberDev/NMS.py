import logging
import ctypes
from dataclasses import dataclass

import pymhf.core.memutils

from pymhf.core.hooking import disable, on_key_pressed, on_key_release
from pymhf.core.memutils import map_struct
from pymhf.core.mod_loader import ModState
from nmspy import NMSMod
from pymhf.core.calling import call_function
import pymhf.core.hooking
from pymhf import FUNCDEF
from nmspy.data.common import cTkFixedString
from pymhf.gui import INTEGER
from nmspy.data.common import GcSeed

@dataclass
class exportState(ModState):
    seed: ctypes.c_ulonglong = 1
    modifiedUAAddress = ctypes.c_ulonglong
    solarSystemAddress = ctypes.c_ulonglong
    #TODO: Use LibMBIN Struct Mapping Exports

@disable
class universeExport(NMSMod):
    __author__ = "ThatBomberBoi"
    __description__ = "WIP: Attempts to export the entire universe's data"
    __version__ = "0.1"
    __NMSPY_required_version__ = "0.7.0"    

    state = exportState()

    def __init__(self):
        super().__init__()
        self.should_print = False

    # Get All Valid UAs
    # Use Query Function To Get System Seed
    # Use System Generation Function To Get All Data 
     
    #Used to define a Float Type with a label in the Mod GUI, autogenerated by pyMHF.
    @property
    @INTEGER("System Seed:")
    def seed(self):
        return self.state.seed

    #Used to actually update the persisted value with the one input by the user in the GUI.
    @seed.setter
    def seed(self, value):
        self.state.seed = value    

    uaValidityFuncDef = FUNCDEF(restype=ctypes.c_bool, argtypes=[ctypes.c_ulonglong, ctypes.c_ulonglong, ctypes.c_bool])
    @pymhf.core.hooking.manual_hook("cGcFrontendPagePortalRunes::CheckUAIsValid", pattern="48 8B C4 44 88 40 18 48 89 50 10 55 53 56 57 41 54 41 55 41 56 41 57 48 8D A8 88", func_def=uaValidityFuncDef, detour_time="after")
    def uaChecked(self, targetUA, modifiedUA, deterministicRandom, _result_):
        logging.info(f"Is {hex(targetUA)} Valid? {_result_}")
        logging.info(f"Modified UA: {hex(modifiedUA)}, Deterministic? {deterministicRandom}")
        self.state.modifiedUAAddress = modifiedUA

    

    #@on_key_pressed("6")
    #def checkUA(self):
    #    logging.info("Start")
    #    ret = call_function("cGcFrontendPagePortalRunes::CheckUAIsValid", int("0x16e00036d316b", 16), self.state.modifiedUAAddress, False, pattern="48 8B C4 44 88 40 18 48 89 50 10 55 53 56 57 41 54 41 55 41 56 41 57 48 8D A8 88", func_def=self.uaValidityFuncDef)  
    #    logging.info(f"Custom Is Valid? {ret}")      

    #Seems to return the number of planets?
    solarQueryFuncDef = FUNCDEF(restype=ctypes.c_ulonglong, argtypes=[ctypes.c_ulonglong, ctypes.c_ulonglong, ctypes.c_int])
    @pymhf.core.hooking.manual_hook("cGcSolarSystemQuery::Run", pattern="44 88 4C 24 20 53 56", func_def=solarQueryFuncDef, detour_time="after")
    def onSolarQuery(self, this, UA, type, _result_):
        logging.info(f"//-------- Query Result --------//")
        logging.info(f"UA {hex(UA)}")
        logging.info(f"Number Of Planets: {_result_}")
        logging.info(f"System Seed: {map_struct(this + 0x10, ctypes.c_ulonglong).value}")
        #logging.info(f"System Name: {map_struct(this + 0xAE0 + 0x21C4, cTkFixedString[0x128].value)}")
        logging.info(f"//------------------------------//")

    systemGenerateFuncDef = FUNCDEF(restype=ctypes.c_char, argtypes=[ctypes.c_ulonglong, ctypes.c_bool, ctypes.c_ulonglong])
    ##@pymhf.core.hooking.manual_hook("cGcSolarSystem::Generate", pattern="48 8B C4 48 89 58 18 55 56 57 41 54 41 55 41 56 41 57 48 8D A8 98 F8", func_def=systemGenerateFuncDef, detour_time="after")
    def onSystemGenerated(self, this, fromSettings, seed):
        logging.info(f"Generated System via GC Pointer {this} with seed: {map_struct(seed, ctypes.c_ulonglong).value}. With Settings? {fromSettings}")
        logging.info(f"System Name: {map_struct(this + 0x21C4, ctypes.c_char * 0x80).value}")
        logging.info(f"System Seed:{map_struct(this + 0x20F0, ctypes.c_ulonglong).value}")
        logging.info(f"Num Planets: {map_struct(this + 0x21B4, ctypes.c_int).value}")
        numPlanets = map_struct(this + 0x21B4, ctypes.c_int).value
        logging.info("Mapped Num Struct")
        for i in range(numPlanets):
            biomeOffset = i*0x50
            logging.info(f"Planet {i} Biome: {map_struct(this + 0x1E30 + 0x30 + biomeOffset, ctypes.c_int).value}")
        self.state.solarSystemAddress = this 

    systemPollToPrepareFuncDef = FUNCDEF(restype=ctypes.c_ulonglong, argtypes=[ctypes.c_ulonglong])
    @pymhf.core.hooking.manual_hook("cGcSolarSystem::PollToPrepare", pattern="40 55 56 41 54 41 55 41 56 41 57 48 8D", func_def=systemPollToPrepareFuncDef, detour_time="after")
    def onSystemPolled(self, this):
        self.state.solarSystemAddress = this
        logging.info(f"System {map_struct(this + 0x20F0, ctypes.c_ulonglong).value} Polled To Prepare")

    @on_key_pressed("6")
    def genenrateSystem(self):
        logging.info("Start")
        newSeed= GcSeed(19, True)
        #newSeed.Seed = 19
        #newSeed.UseSeedValue = True
        map_struct(self.state.solarSystemAddress + 0x20F0, GcSeed).Seed = newSeed.Seed
        logging.info("Set Seed")
        call_function("cGcSolarSystem::PollToPrepare", self.state.solarSystemAddress, pattern="40 55 56 41 54 41 55 41 56 41 57 48 8D", func_def=self.systemPollToPrepareFuncDef) 
        logging.info("System Polled...")
        call_function("cGcSolarSystem::Generate", self.state.solarSystemAddress, False, pymhf.core.memutils.get_addressof(newSeed), pattern="48 8B C4 48 89 58 18 55 56 57 41 54 41 55 41 56 41 57 48 8D A8 98 F8", func_def=self.systemGenerateFuncDef)
        logging.info(f"Finished Generating {map_struct(0x21C4, cTkFixedString[0x80]).value}")
        logging.info(f"System Seed: {map_struct(self.state.solarSystemAddress + 0x20F0, GcSeed).Seed}")
        #logging.info(f"Num Planets: {map_struct(self.state.solarSystemAddress + 0x21B4, ctypes.c_int).value}")
        numPlanets = map_struct(self.state.solarSystemAddress + 0x21B4, ctypes.c_int).value
        for i in range(numPlanets):
            biomeOffset = i*0x50
            logging.info(f"Planet {i} Biome: {map_struct(self.state.solarSystemAddress + 0x1E30 + 0x30 + biomeOffset, ctypes.c_int).value}")
            #logging.info(f"Planet 2 Biome: {map_struct(self.state.solarSystemAddress + 0x1E30 + 0x50 + 0x30, ctypes.c_int).value}")